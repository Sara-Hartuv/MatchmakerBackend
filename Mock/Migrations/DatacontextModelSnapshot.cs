// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Mock;

#nullable disable

namespace Mock.Migrations
{
    [DbContext(typeof(Datacontext))]
    partial class DatacontextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.36")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Repository.Entities.Brother", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AddressIn_laws")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CandidateId")
                        .HasColumnType("int");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<bool?>("Married")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameIn_laws")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlaceOfStudy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.ToTable("Brothers");
                });

            modelBuilder.Entity("Repository.Entities.Candidate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Adress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AskingMoney")
                        .HasColumnType("int");

                    b.Property<bool?>("Beard")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("BornDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CellPhone")
                        .HasColumnType("int");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<int?>("ClothingStyle")
                        .HasColumnType("int");

                    b.Property<bool>("Confirmation")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionFind")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FamilyOpenness")
                        .HasColumnType("int");

                    b.Property<int?>("FamilyStyle")
                        .HasColumnType("int");

                    b.Property<string>("FatherName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FatherOccupation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<int?>("GivesMoney")
                        .HasColumnType("int");

                    b.Property<int?>("HairColor")
                        .HasColumnType("int");

                    b.Property<int?>("Hat")
                        .HasColumnType("int");

                    b.Property<int?>("HeadCovering")
                        .HasColumnType("int");

                    b.Property<double?>("Height")
                        .HasColumnType("float");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LastStudy")
                        .HasColumnType("int");

                    b.Property<bool?>("License")
                        .HasColumnType("bit");

                    b.Property<string>("MotherName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotherOccupation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameFromHome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Openness")
                        .HasColumnType("int");

                    b.Property<int?>("ParentalStatus")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Physique")
                        .HasColumnType("int");

                    b.Property<int?>("ProfessionId")
                        .HasColumnType("int");

                    b.Property<int?>("Sector")
                        .HasColumnType("int");

                    b.Property<int?>("SkinTone")
                        .HasColumnType("int");

                    b.Property<bool?>("Smoker")
                        .HasColumnType("bit");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("StudyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SubSector")
                        .HasColumnType("int");

                    b.Property<int?>("Suit")
                        .HasColumnType("int");

                    b.Property<string>("Workplace")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("ProfessionId");

                    b.ToTable("Candidates");
                });

            modelBuilder.Entity("Repository.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Repository.Entities.Inquiries", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CandidateId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.ToTable("Inquiries");
                });

            modelBuilder.Entity("Repository.Entities.Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<bool>("ConfirmationGirl")
                        .HasColumnType("bit");

                    b.Property<bool>("ConfirmationGuy")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DateMatch")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCandidateGirl")
                        .HasColumnType("int");

                    b.Property<int>("IdCandidateGuy")
                        .HasColumnType("int");

                    b.Property<int>("IdMatchmaker")
                        .HasColumnType("int");

                    b.Property<bool>("IsEngaged")
                        .HasColumnType("bit");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("IdCandidateGirl");

                    b.HasIndex("IdCandidateGuy");

                    b.HasIndex("IdMatchmaker");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("Repository.Entities.Matchmaker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Adress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BornDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ExperienceYear")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Matchmakers");
                });

            modelBuilder.Entity("Repository.Entities.Profession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Professions");
                });

            modelBuilder.Entity("Repository.Entities.Brother", b =>
                {
                    b.HasOne("Repository.Entities.Candidate", null)
                        .WithMany("Brothers")
                        .HasForeignKey("CandidateId");
                });

            modelBuilder.Entity("Repository.Entities.Candidate", b =>
                {
                    b.HasOne("Repository.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("Repository.Entities.Profession", "profession")
                        .WithMany()
                        .HasForeignKey("ProfessionId");

                    b.Navigation("City");

                    b.Navigation("profession");
                });

            modelBuilder.Entity("Repository.Entities.Inquiries", b =>
                {
                    b.HasOne("Repository.Entities.Candidate", null)
                        .WithMany("Inquiries")
                        .HasForeignKey("CandidateId");
                });

            modelBuilder.Entity("Repository.Entities.Match", b =>
                {
                    b.HasOne("Repository.Entities.Candidate", "girl")
                        .WithMany()
                        .HasForeignKey("IdCandidateGirl")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Repository.Entities.Candidate", "guy")
                        .WithMany()
                        .HasForeignKey("IdCandidateGuy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Repository.Entities.Matchmaker", "matchmaker")
                        .WithMany("History")
                        .HasForeignKey("IdMatchmaker")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("girl");

                    b.Navigation("guy");

                    b.Navigation("matchmaker");
                });

            modelBuilder.Entity("Repository.Entities.Matchmaker", b =>
                {
                    b.HasOne("Repository.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.Navigation("City");
                });

            modelBuilder.Entity("Repository.Entities.Candidate", b =>
                {
                    b.Navigation("Brothers");

                    b.Navigation("Inquiries");
                });

            modelBuilder.Entity("Repository.Entities.Matchmaker", b =>
                {
                    b.Navigation("History");
                });
#pragma warning restore 612, 618
        }
    }
}
